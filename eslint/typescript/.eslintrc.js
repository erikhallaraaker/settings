/* eslint-disable key-spacing, sonarjs/no-duplicate-string, unicorn/prefer-module */

const ERROR = "error";
const WARN = "warn";
const OFF = "off";

module.exports = {
    root: true,
    parser: "@typescript-eslint/parser",
    parserOptions: {
        ecmaVersion: 2020,
        sourceType: "module",
        tsconfigRootDir: __dirname,
        project: "./tsconfig.json",
        createDefaultProgram: true,
    },
    env: {
        browser: true,
        es2020: true,
        node: true,
    },
    settings: {
        "react": {
            pragma: "React",
            version: "detect",
        },
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".tsx"],
        },
        "import/resolver": {
            node: {
                extensions: [".js", ".jsx", ".ts", ".tsx"],
            },
            typescript: {
                alwaysTryTypes: true,
                project: "./tsconfig.json",
            },
        },
    },
    plugins: [
        "@typescript-eslint",
        "array-func",
        "import",
        "jsx-a11y",
        "optimize-regex",
        "promise",
        "react",
        "react-hooks",
        "security",
        "sonarjs",
        "unicorn",
    ],
    extends: [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:array-func/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "plugin:jsx-a11y/recommended",
        "plugin:promise/recommended",
        "plugin:react-hooks/recommended",
        "plugin:react/recommended",
        "plugin:security/recommended",
        "plugin:sonarjs/recommended",
        "plugin:unicorn/recommended",

    ],
    // Set rules to either ERROR, WARN or OFF
    rules: {
        "@typescript-eslint/consistent-type-assertions":                [ERROR],
        "@typescript-eslint/consistent-type-definitions":               [ERROR],
        "@typescript-eslint/explicit-function-return-type":             [WARN],
        "@typescript-eslint/explicit-module-boundary-types":            [OFF],
        "@typescript-eslint/explicit-member-accessibility":             [OFF],
        "@typescript-eslint/func-call-spacing":                         [ERROR],
        "@typescript-eslint/indent":                                    [WARN, 4,
            { SwitchCase: 1 },
        ],
        "@typescript-eslint/member-delimiter-style":                    [WARN,
            {
                multiline: {
                    delimiter: "semi",
                    requireLast: true,
                },
                singleline: {
                    delimiter: "semi",
                    requireLast: true,
                },
            },
        ],
        "@typescript-eslint/naming-convention":                         [WARN,
            // TODO: Tweak these
            {
                selector: "variableLike",
                format: ["camelCase", "PascalCase", "UPPER_CASE"],
                leadingUnderscore: "allow",
            },
            {
                selector: "memberLike",
                modifiers: ["private"],
                format: ["camelCase"],
                leadingUnderscore: "require",
            },
            {
                selector: "variable",
                modifiers: ["const"],
                types: ["string"],
                format: ["UPPER_CASE", "PascalCase", "camelCase"],
                leadingUnderscore: "allow",
            },
            {
                selector: "typeParameter",
                format: ["PascalCase"],
            },
            {
                selector: "interface",
                format: ["PascalCase"],
            },
        ],
        "@typescript-eslint/no-confusing-non-null-assertion":           [WARN],
        "@typescript-eslint/no-explicit-any":                           [WARN],
        "@typescript-eslint/no-inferrable-types":                       [WARN],
        "@typescript-eslint/no-non-null-assertion":                     [WARN],
        "@typescript-eslint/no-unused-vars":                            [WARN,
            { ignoreRestSiblings: true },
        ],
        "@typescript-eslint/prefer-nullish-coalescing":                 [WARN],
        "@typescript-eslint/prefer-optional-chain":                     [WARN],
        "@typescript-eslint/type-annotation-spacing":                   [ERROR],
        "array-bracket-spacing":                                        [WARN, "never"],
        "array-func/prefer-array-from":                                 [OFF],
        "arrow-body-style":                                             [WARN, "as-needed"],
        "arrow-parens":                                                 [ERROR, "as-needed"],
        "arrow-spacing":                                                [ERROR],
        "block-scoped-var":                                             [WARN],
        "block-spacing":                                                [ERROR, "always"],
        "brace-style":                                                  [ERROR, "1tbs",
            { allowSingleLine: true },
        ],
        "camelcase":                                                    [ERROR,
            { properties: "always" },
        ],
        "comma-dangle":                                                 [WARN,
            {
                arrays: "always-multiline",
                objects: "always-multiline",
                imports: "only-multiline",
                exports: "only-multiline",
                functions: "only-multiline",
            },
        ],
        "comma-spacing":                                                [WARN,
            { before: false, after: true },
        ],
        "comma-style":                                                  [WARN],
        "computed-property-spacing":                                    [WARN],
        "constructor-super":                                            [ERROR],
        "curly":                                                        [ERROR, "all"],
        "default-case":                                                 [ERROR],
        "dot-notation":                                                 [ERROR],
        "eol-last":                                                     [WARN, "always"],
        "eqeqeq":                                                       [ERROR],
        "func-call-spacing":                                            [WARN],
        "func-style":                                                   [ERROR, "expression"],
        "function-paren-newline":                                       [ERROR, "consistent"],
        "implicit-arrow-linebreak":                                     [WARN, "beside"],
        "import/order":                                                 [ERROR,
            {
                "newlines-between": "always",
                "pathGroups": [
                    {
                        pattern: "~/**",
                        group: "sibling",
                    },
                ],
                "groups": [
                    ["external", "builtin", "internal"],
                    ["sibling", "parent"],
                ],
            },
        ],
        "jsx-a11y/anchor-is-valid":                                     [WARN],
        "jsx-quotes":                                                   [WARN, "prefer-double"],
        "key-spacing":                                                  [WARN],
        "keyword-spacing":                                              [WARN],
        "lines-between-class-members":                                  [WARN, "always",
            { exceptAfterSingleLine: true },
        ],
        "new-cap":                                                      [ERROR],
        "new-parens":                                                   [ERROR],
        "newline-before-return":                                        [WARN],
        "newline-per-chained-call":                                     [WARN,
            { ignoreChainWithDepth: 3 },
        ],
        "no-alert":                                                     [ERROR],
        "no-console":                                                   [WARN,
            { allow: [WARN, ERROR] },
        ],
        "no-const-assign":                                              [ERROR],
        "no-dupe-class-members":                                        [ERROR],
        "no-duplicate-imports":                                         [ERROR],
        "no-eval":                                                      [ERROR],
        "no-extra-semi":                                                [ERROR],
        "no-floating-decimal":                                          [ERROR],
        "no-invalid-regexp":                                            [ERROR],
        "no-irregular-whitespace":                                      [ERROR],
        "no-lonely-if":                                                 [ERROR],
        "no-mixed-spaces-and-tabs":                                     [WARN],
        "no-multi-spaces":                                              [WARN],
        "no-multiple-empty-lines":                                      [WARN,
            { max: 1 },
        ],
        "no-redeclare":                                                 [WARN],
        "no-this-before-super":                                         [WARN],
        "no-trailing-spaces":                                           [WARN],
        "no-undef-init":                                                [ERROR],
        "no-unneeded-ternary":                                          [ERROR],
        "no-unreachable":                                               [ERROR],
        "no-useless-constructor":                                       [ERROR],
        "no-useless-rename":                                            [ERROR],
        "no-useless-return":                                            [ERROR],
        "no-var":                                                       [ERROR],
        "no-whitespace-before-property":                                [WARN],
        "object-curly-newline":                                         [WARN],
        "object-curly-spacing":                                         [WARN, "always"],
        "object-property-newline":                                      [WARN,
            { allowAllPropertiesOnSameLine: true },
        ],
        "object-shorthand":                                             [ERROR, "always",
            { avoidExplicitReturnArrows: true },
        ],
        "one-var":                                                      [ERROR, "never"],
        "optimize-regex/optimize-regex":                                [WARN],
        "padding-line-between-statements":                              [WARN,
            {
                blankLine: "always",
                prev: "*",
                next: ["case", "class", "const", "block", "block-like", "default", "break", "export", "expression", "do", "for", "function", "if", "import", "let", "return", "switch", "try", "while"],
            },
            {
                blankLine: "always",
                prev: ["class", "const", "block", "block-like", "break", "export", "expression", "do", "for", "function", "if", "import", "let", "return", "switch", "try", "while"],
                next: "*",
            },
            {
                blankLine: "any",
                prev: "expression",
                next: ["expression", "break"],
            },
            {
                blankLine: "any",
                prev: "import",
                next: "import",
            },
            {
                blankLine: "any",
                prev: "export",
                next: "export",
            },
            {
                blankLine: "any",
                prev: ["let", "const"],
                next: ["let", "const"],
            },
            {
                blankLine: "any",
                prev: "case",
                next: ["case", "return"],
            },
        ],
        "prefer-arrow-callback":                                        [ERROR],
        "prefer-const":                                                 [WARN],
        "prefer-destructuring":                                         [WARN],
        "prefer-object-spread":                                         [WARN],
        "prefer-spread":                                                [WARN],
        "prefer-template":                                              [ERROR],
        "quote-props":                                                  [WARN, "consistent-as-needed"],
        "quotes":                                                       [WARN, "double"],
        "sonarjs/no-identical-functions":                                 [WARN],
        "sonarjs/cognitive-complexity":                                   [OFF],
        "react-hooks/exhaustive-deps":                                  [WARN],
        "react-hooks/rules-of-hooks":                                   [ERROR],
        "react/button-has-type":                                        [ERROR],
        "react/function-component-definition":                          [WARN,
            { namedComponents: "arrow-function" },
        ],
        "react/jsx-boolean-value":                                      [WARN, "never"],
        "react/jsx-closing-bracket-location":                           [ERROR,
            {
                selfClosing: "tag-aligned",
                nonEmpty: "tag-aligned",
            },
        ],
        "react/jsx-curly-brace-presence":                               [WARN,
            { children: "ignore" },
        ],
        "react/jsx-curly-spacing":                                      [WARN],
        "react/jsx-equals-spacing":                                     [ERROR, "never"],
        "react/jsx-fragments":                                          [WARN, "syntax"],
        "react/jsx-first-prop-new-line":                                [WARN, "multiline"],
        "react/jsx-handler-names":                                      [WARN],
        "react/jsx-max-depth":                                          [WARN,
            { max: 7 },
        ],
        "react/jsx-max-props-per-line":                                 [WARN,
            {
                when: "multiline",
                maximum: 3,
            },
        ],
        "react/jsx-no-bind":                                            [ERROR,
            {
                allowArrowFunctions: true,
                allowBind: false,
                ignoreRefs: true,
            },
        ],
        "react/jsx-no-useless-fragment":                                [ERROR],
        "react/no-array-index-key":                                     [ERROR],
        "react/jsx-one-expression-per-line":                            [WARN,
            { allow: "single-child" },
        ],
        "react/jsx-tag-spacing":                                        [ERROR,
            { beforeSelfClosing: "always" },
        ],
        "react/jsx-uses-vars":                                          [ERROR],
        "react/jsx-wrap-multilines":                                    [WARN,
            {
                declaration: "parens-new-line",
                assignment: "parens-new-line",
                return: "parens-new-line",
                arrow: "parens-new-line",
                condition: "parens-new-line",
                logical: "parens-new-line",
                prop: "parens-new-line",
            },
        ],
        "react/no-children-prop":                                       [ERROR],
        "react/no-did-update-set-state":                                [ERROR],
        "react/no-unknown-property":                                    [ERROR],
        "react/no-unused-prop-types":                                   [ERROR],
        "react/prop-types":                                             [OFF],
        "react/react-in-jsx-scope":                                     [OFF],
        "rest-spread-spacing":                                          [ERROR, "never"],
        "security/detect-non-literal-fs-filename":                      [OFF],
        "security/detect-object-injection":                             [OFF],
        "semi":                                                         [ERROR, "always"],
        "semi-spacing":                                                 [WARN],
        "semi-style":                                                   [ERROR],
        "space-before-blocks":                                          [WARN],
        "space-before-function-paren":                                  [WARN, "always"],
        "space-in-parens":                                              [WARN],
        "space-infix-ops":                                              [WARN],
        "spaced-comment":                                               [WARN, "always"],
        "switch-colon-spacing":                                         [ERROR],
        "template-curly-spacing":                                       [ERROR, "never"],
        "unicorn/explicit-length-check":                                [OFF],
        "unicorn/filename-case":                                        [ERROR,
            {
                cases: {
                    camelCase: true,
                    pascalCase: true,
                },
            },
        ],
        "unicorn/no-array-for-each":                                    [OFF],
        "unicorn/no-array-reduce":                                      [OFF],
        "unicorn/no-nested-ternary":                                    [WARN],
        "unicorn/no-null":                                              [OFF],
        "unicorn/no-unreadable-array-destructuring":                    [OFF],
        "unicorn/prefer-node-protocol":                                 [OFF],
        "unicorn/prefer-number-properties":                             [OFF],
        "unicorn/prefer-set-has":                                       [OFF],
        "unicorn/prefer-spread":                                        [WARN],
        "unicorn/prevent-abbreviations":                                [OFF],
        "wrap-regex":                                                   [ERROR],
    },
    overrides: [
        {
            files: ["*.js"],
            rules: {
                "@typescript-eslint/explicit-function-return-type":     [OFF],
            },
        },
    ],
};
